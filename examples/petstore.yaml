openapi: 3.0.0
info:
  title: Pet Shop Example API
  version: '0.1'
  description: Simple example API to store and retrieve pets
security:
  - oauth2:
      - uid
paths:
  /pets:
    get:
      tags:
        - Pets
      operationId: get_pets
      summary: Get all pets
      parameters:
        - name: animal_type
          in: query
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]*$'
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 100
      responses:
        '200':
          description: Return pets
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
    post:
      operationId: post_pet
      summary: Add a new pet
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 100
      requestBody:
        description: The pet in json format.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Created

  '/pets/{pet_id}':
    get:
      tags:
        - Pets
      operationId: get_pet
      summary: Get a single pet
      parameters:
        - $ref: '#/components/parameters/pet_id'
      responses:
        '200':
          description: Return pet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet does not exist
    put:
      tags:
        - Pets
      operationId: put_pet
      summary: Update a pet
      parameters:
        - $ref: '#/components/parameters/pet_id'
      responses:
        '200':
          description: Pet updated
        #'201':
        #  description: New pet created
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetUpdate'
    delete:
      tags:
        - Pets
      operationId: delete_pet
      summary: Remove a pet
      parameters:
        - $ref: '#/components/parameters/pet_id'
      responses:
        '204':
          description: Pet was deleted
        '404':
          description: Pet does not exist
components:
  parameters:
    pet_id:
      name: pet_id
      description: Pet's Unique identifier
      in: path
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-]+$'
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://example.com/oauth2/dialog'
          scopes:
            uid: Unique identifier of the user accessing the service.
  schemas:
    Pet:
      type: object
      required:
        - name
        - animal_type
      properties:
        id:
          type: string
          description: Unique identifier
          example: '123'
          readOnly: true
        name:
          type: string
          description: Pet's name
          example: Susie
          minLength: 1
          maxLength: 100
        animal_type:
          type: string
          description: Kind of animal
          example: cat
          minLength: 1
        tags:
          type: object
          description: Custom tags
        created:
          type: string
          format: date-time
          description: Creation time
          example: '2015-07-07T15:49:51.230+02:00'
          readOnly: true

    PetUpdate:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: '123'
          readOnly: true
        name:
          type: string
          description: Pet's name
          example: Susie
          minLength: 1
          maxLength: 100
        animal_type:
          type: string
          description: Kind of animal
          example: cat
          minLength: 1
        tags:
          type: object
          description: Custom tags
        created:
          type: string
          format: date-time
          description: Creation time
          example: '2015-07-07T15:49:51.230+02:00'
          readOnly: true
